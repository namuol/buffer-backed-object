"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});function O(t){return typeof t=="symbol"?!1:!isNaN(t)}function a(t,e){let r=t-t%e;return t%e!=0&&(r+=e),r}function d(t){let e=0;for(const{align:r=1,size:i}of Object.values(t))e=a(e,r)+i;return e=a(e,b(t)),e}function b(t){return Math.max(...Object.values(t).map(e=>e.align??1))}function y(t,e,{byteOffset:r=0,length:i=0,align:n=b(e)}={}){const l=new DataView(t,r);let u=0;const E={...e};for(const[f,o]of Object.entries(E))E[f]={...o,offset:a(u,o.align??1)},u=E[f].offset+o.size;return u=a(u,n),i||(i=Math.floor((t.byteLength-r)/u)),new Proxy(new Array(i),{has(f,o){return O(o)?o<i:o==="buffer"?!0:o in f},get(f,o,U){if(o==="buffer")return t;if(!O(o)){let c=f[o];return typeof c=="function"&&(c=c.bind(U)),c}const s=parseInt(o),B=s*u;if(!(s>=f.length)){if(!f[s]){f[s]={};for(const[c,g]of Object.entries(E))"get"in g&&Object.defineProperty(f[s],c,{enumerable:!0,get(){return g.get(l,B+g.offset)},set(I){return g.set(l,B+g.offset,I)}});Object.freeze(f[s])}return f[s]}}})}function T(t,e,{byteOffset:r=0,align:i=1}={}){return y(t,e,{byteOffset:r,align:i})[0]}function h({endianness:t="little",align:e=2}={}){if(t!=="big"&&t!=="little")throw Error("Endianness needs to be either 'big' or 'little'");const r=t==="little";return{type:"Uint16",align:e,size:Uint16Array.BYTES_PER_ELEMENT,get:(i,n)=>i.getUint16(n,r),set:(i,n,l)=>i.setUint16(n,l,r)}}function w({endianness:t="little",align:e=4}={}){if(t!=="big"&&t!=="little")throw Error("Endianness needs to be either 'big' or 'little'");const r=t==="little";return{type:"Uint32",align:e,size:Uint32Array.BYTES_PER_ELEMENT,get:(i,n)=>i.getUint32(n,r),set:(i,n,l)=>i.setUint32(n,l,r)}}function A({endianness:t="little",align:e=2}={}){if(t!=="big"&&t!=="little")throw Error("Endianness needs to be either 'big' or 'little'");const r=t==="little";return{type:"Int16",align:e,size:Int16Array.BYTES_PER_ELEMENT,get:(i,n)=>i.getInt16(n,r),set:(i,n,l)=>i.setInt16(n,l,r)}}function j({endianness:t="little",align:e=4}={}){if(t!=="big"&&t!=="little")throw Error("Endianness needs to be either 'big' or 'little'");const r=t==="little";return{type:"Int32",align:e,size:Int32Array.BYTES_PER_ELEMENT,get:(i,n)=>i.getInt32(n,r),set:(i,n,l)=>i.setInt32(n,l,r)}}function z({endianness:t="little",align:e=4}={}){if(t!=="big"&&t!=="little")throw Error("Endianness needs to be either 'big' or 'little'");const r=t==="little";return{type:"Float32",align:e,size:Float32Array.BYTES_PER_ELEMENT,get:(i,n)=>i.getFloat32(n,r),set:(i,n,l)=>i.setFloat32(n,l,r)}}function _({endianness:t="little",align:e=8}={}){if(t!=="big"&&t!=="little")throw Error("Endianness needs to be either 'big' or 'little'");const r=t==="little";return{type:"Float64",align:e,size:Float64Array.BYTES_PER_ELEMENT,get:(i,n)=>i.getFloat64(n,r),set:(i,n,l)=>i.setFloat64(n,l,r)}}function F({endianness:t="little",align:e=8}={}){if(t!=="big"&&t!=="little")throw Error("Endianness needs to be either 'big' or 'little'");const r=t==="little";return{type:"BigInt64",align:e,size:BigInt64Array.BYTES_PER_ELEMENT,get:(i,n)=>i.getBigInt64(n,r),set:(i,n,l)=>i.setBigInt64(n,l,r)}}function S({endianness:t="little",align:e=8}={}){if(t!=="big"&&t!=="little")throw Error("Endianness needs to be either 'big' or 'little'");const r=t==="little";return{type:"BigUint64",align:e,size:BigUint64Array.BYTES_PER_ELEMENT,get:(i,n)=>i.getBigUint64(n,r),set:(i,n,l)=>i.setBigUint64(n,l,r)}}function M(){return{type:"Uint8",align:1,size:1,get:(t,e)=>t.getUint8(e),set:(t,e,r)=>t.setUint8(e,r)}}function N(){return{type:"Int8",align:1,size:1,get:(t,e)=>t.getInt8(e),set:(t,e,r)=>t.setInt8(e,r)}}function P(t){const e=d(t);return{type:"NestedBufferBackedObject",align:b(t),size:e,get:(r,i)=>y(r.buffer,t,{byteOffset:r.byteOffset+i,length:1})[0],set:(r,i,n)=>{throw Error("Can’t set an entire struct")}}}function k(t,e){const r=d(e)*t;return{type:"NestedArrayOfBufferBackedObjects",align:Object.values(e)[0].align??1,size:r,get:(i,n)=>y(i.buffer,e,{byteOffset:n+i.byteOffset,length:t}),set:(i,n,l)=>{throw Error("Can’t set an entire array")}}}function v(t){return{type:"UTF8String",align:1,size:t,get:(e,r)=>new TextDecoder().decode(new Uint8Array(e.buffer,r,t)).replace(/\u0000+$/,""),set:(e,r,i)=>{const n=new TextEncoder().encode(i),l=new Uint8Array(e.buffer,r,t);l.fill(0),l.set(n.subarray(0,t))}}}function L(t){return{type:"reserved",align:1,size:t,get(){},set(){}}}exports.ArrayOfBufferBackedObjects=y;exports.BigInt64=F;exports.BigUint64=S;exports.BufferBackedObject=T;exports.Float32=z;exports.Float64=_;exports.Int16=A;exports.Int32=j;exports.Int8=N;exports.NestedArrayOfBufferBackedObjects=k;exports.NestedBufferBackedObject=P;exports.UTF8String=v;exports.Uint16=h;exports.Uint32=w;exports.Uint8=M;exports.reserved=L;exports.structAlign=b;exports.structSize=d;
